{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-03-20-kotlin-conditional-assignments/","result":{"data":{"site":{"siteMetadata":{"title":"Christoph's Blog about Digital Stuff"}},"markdownRemark":{"id":"7c751a57-ad01-565e-bf07-d4d1f0af330b","excerpt":"I wanted to share with you something today, that I find beautiful. It sparks joy in me when seeing it. Of course, beauty is in the eye of the beholder, so you…","html":"<p>I wanted to share with you something today, that I find beautiful. It sparks joy in me when seeing it. Of course, beauty is in the eye of the beholder, so you might think differently, and that’s okay as well.</p>\n<p>Let’s take a look at this assignment of a value to a variable. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Bob\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token operator\">=</span> <span class=\"token string\">\"Good Day Sir\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message is: \"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We all have an assignment like that in our codebase somewhere. Or maybe we have something with a switch-statement.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bob\"</span><span class=\"token operator\">:</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Bob\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        message <span class=\"token operator\">=</span> <span class=\"token string\">\"Good Day Sir\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message is: \"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Why is this a bad style? The whole style is verbose and invites to add additional code into the if and switch-statement. It’s not easily apparent what is the relationship between the condition check and the variable that should be assigned. It becomes even worse when there is a default value or null assigned to the message. Making the whole statement error-prone as well, since it can easily happen that the assignment is missed in one of the cases.</p>\n<p>Now let’s look at how Kotlin solves this. In Kotlin conditional statements are assignable! Wow! This means you can replace the first example with the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Hello Bob\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Good Day Sir\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message is: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>message<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Do you see how this makes the code more readable? The whole purpose of the if-statement becomes much clearer. It’s there since we need to assign a value to our message variable, based on a condition we have to evaluate.</p>\n<p>The same goes for our second example with the switch-statement.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Bob\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Hello Bob\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Good Day Sir\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message is: <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>message<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Not just that the when-statement has a lot less boilerplate, compared to the traditional switch-statement. The whole purpose of the when-statement in such a conditional assignment becomes immediately clear to the reader.</p>\n<p>You can read more about Kotlin’s when statement with very nice examples on <a href=\"https://www.baeldung.com/kotlin/when\">Baeldung</a>.</p>","frontmatter":{"title":"Assigning values in Kotlin with a condition","date":"March 20, 2021","description":"Kotlin provides some really beautiful options when assigning values"}}},"pageContext":{"slug":"/2021-03-20-kotlin-conditional-assignments/","previous":{"fields":{"slug":"/2021-03-14-covid-data-with-dataflow-and-bigquery/"},"frontmatter":{"title":"Analyzing Covid Data with Dataflow and BigQuery"}},"next":null}},"staticQueryHashes":["1246554614","2841359383"]}